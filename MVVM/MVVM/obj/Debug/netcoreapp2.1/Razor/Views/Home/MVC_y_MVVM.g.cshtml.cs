#pragma checksum "C:\Users\erroa\Downloads\MVVM\MVVM\Views\Home\MVC_y_MVVM.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d00c39c56cca3c47891adede3694dc462d3b6084"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_MVC_y_MVVM), @"mvc.1.0.view", @"/Views/Home/MVC_y_MVVM.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/MVC_y_MVVM.cshtml", typeof(AspNetCore.Views_Home_MVC_y_MVVM))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\erroa\Downloads\MVVM\MVVM\Views\_ViewImports.cshtml"
using MVVM;

#line default
#line hidden
#line 2 "C:\Users\erroa\Downloads\MVVM\MVVM\Views\_ViewImports.cshtml"
using MVVM.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d00c39c56cca3c47891adede3694dc462d3b6084", @"/Views/Home/MVC_y_MVVM.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6dcf055ce8bbaa1d887e5746cbe64bc89934e9d2", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_MVC_y_MVVM : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/banner.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Banner"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("img-responsive"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/mvc.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("MVC"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/mvvm.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("MVVM"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\erroa\Downloads\MVVM\MVVM\Views\Home\MVC_y_MVVM.cshtml"
  
    ViewData["Title"] = "MVC y MVVM";

#line default
#line hidden
            BeginContext(48, 110, true);
            WriteLiteral("\r\n\r\n<nav style=\"padding: 40px;\">\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <br />");
            EndContext();
            BeginContext(158, 69, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "52993aa83f16499f8be2bc6e5b8413bc", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(227, 1149, true);
            WriteLiteral(@"<br />
            <h2 class=""text-center"">¿Qué es MVC y MVVM?</h2>
        </div><br /><br />

        <div class=""col-md-6"">
            <h3 class=""text-center"">MVC (Modelo Vista Controlador)</h3>
            <p class=""text-justify"">
                Modelo Vista Controlador es una arquitectura del software utilizada para separar el código por sus distintas
                responsabilidades, manteniendo distintas capas que se encargan de hacer una tarea muy concreta, lo que ofrece
                beneficios diversos. Es decir que separa la interfaz de usuario, y la lógica de negocio en tres componentes
                distintos. Cuando la lógica de negocio realiza un cambio, es necesario que ella sea la que actualiza la vista.
            </p>
            <p class=""text-justify"">
                Esta surge basada en la necesidad de crear software más robusto con un ciclo de vida más adecuado, donde se
                potencie la facilidad de mantenimiento, reutilización del código y la separaci");
            WriteLiteral("ón de conceptos. A continuación,\r\n                se presenta cada una de sus partes:\r\n            </p><br />\r\n\r\n            ");
            EndContext();
            BeginContext(1376, 63, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "a83a5d22de08443ba1fee79a12c25436", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1439, 3013, true);
            WriteLiteral(@"<br />

            <h4>Modelo</h4>
            <p class=""text-justify"">
                Es la capa donde se trabaja con los datos, por tanto, contendrá mecanismos para acceder a la información y
                también para actualizar su estado. Los datos los tendremos habitualmente en una base de datos, por lo que
                en los modelos tendremos todas las funciones que accederán a las tablas y harán los correspondientes selects,
                updates, inserts, etc.
            </p><br />
            <h4>Vista</h4>
            <p class=""text-justify"">
                Como su nombre lo indica, es la capa donde se encuentran las interfaces por las que el usuario podrá interactuar
                con el sistema, estas a su vez contienen el código que va a producir la visualización de las interfaces de usuario,
                o sea, el código que nos permitirá renderizar los estados de nuestra aplicación en HTML. En las vistas nada más
                tenemos los códigos HTML y PHP (si ");
            WriteLiteral(@"es necesario) que nos permite mostrar la salida, no se debe colocar código que
                pertenezca a la lógica de negocio, ya que eso se realiza en la capa de controladores.
            </p><br />
            <h4>Controlador</h4>
            <p class=""text-justify"">
                En esta capa se coloca el código necesario para responder a las acciones que se solicitan en la aplicación, como
                visualizar un elemento, realizar comparaciones, una búsqueda de información, etc.
            </p>
            <p class=""text-justify"">
                Básicamente sirve de enlace entre las vistas y los modelos, respondiendo a los mecanismos que puedan requerirse
                para implementar las necesidades de nuestra aplicación, es decir, que solo funciona como intermediario para
                mostrar los datos obtenidos de los modelos y pasarlos a mostrar en las vistas. Sin embargo, su responsabilidad
                no es manipular directamente datos, ni mostrar ningún tipo de ");
            WriteLiteral(@"salida, sino servir de enlace entre los modelos
                y las vistas para implementar las diversas necesidades del desarrollo.
            </p>
        </div>

        <div class=""col-md-6"">
            <h3 class=""text-center"">MVVM (Modelo Vista Vista de Modelo)</h3>
            <p class=""text-justify"">
                EL patrón de diseño Modelo, Vista, Vista de modelo fue desarrollado por Microsoft alrededor del año 2004;
                este tiene como objetivo separar la lógica de negocios con la interfaz de usuario, facilitando las pruebas,
                el mantenimiento, permite generar código más reutilizable y crea enlace de datos complejo. Este patrón
                proporciona un mejor flujo de trabajo entre el diseñador y el desarrollador gracias la separación, mejorando
                la simplicidad del trabajo. Existen tres componentes que nos ayudan a lograrlo los cuales son:
            </p><br />

            ");
            EndContext();
            BeginContext(4452, 65, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "875967618d6d45bd93b5e66de5eab04e", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4517, 3557, true);
            WriteLiteral(@"<br />

            <h4>Modelo</h4>
            <p class=""text-justify"">
                Esta capa tiene la misma funcionalidad que la de MVC, es aquí donde se trabajan los datos de la aplicación
                estableciendo formas para acceder a la información y para actualizarla. Aquí es donde se realiza una conexión
                con la base de datos de la aplicación, también se crean los comandos para insertar, consultar, actualizar y
                eliminar la información.
            </p><br />

            <h4>Vista</h4>
            <p class=""text-justify"">
                Esta capa contiene las interfaces con las que el usuario podrá interactuar con la aplicación y presentar los datos.
                Estas hacen la solicitud a la capa ViewModel para que esta también la pida a la capa modelo, luego los resultados se
                pasan al ViewModel para finalmente lleguen a la vista.
            </p><br />

            <h4>Vista de Modelo</h4>
            <p class=""text-justify");
            WriteLiteral(@""">
                Esta capa no conoce directamente a la vista, sino que la comunicación entre estas se realiza a través de alguna
                propiedad y enlace. Los modelos están conectados directamente al ViewModel e invocan un método por la clase del
                modelo, sabe lo que tiene el modelo, como propiedades, métodos, etc. y también es consciente de lo que necesita
                la vista. Es decir que una ventana de la capa vista se conecta a un ViewModel para solicitar la información que se
                sustrae en la capa de modelo y asi poder presentar los datos.
            </p><br />

        </div>


    </div><br />

    <div class=""row"">
        <div class=""col-md-12"">
            <h3>Diferencias entre MVC y MVVM</h3>
            <p class=""text-justify"">
                Apresar de que ambos patrones de diseño tienen cosas en común como, por ejemplo, que los dos permiten
                crear un desarrollo simultaneo de diseño y programación; también poseen dife");
            WriteLiteral(@"rencias como lo es que,
                para el patrón MVC la capa del controlador es la pieza central que funciona como intermediario entre
                el modelo y la vista, este ejecuta las peticiones del usuario para solicitar los datos al modelo y
                efectuar un cambio en las vistas. Es decir que este realiza los eventos de interacción con el usuario,
                además, la vista no tiene referencia directa con el controlador.
            </p>

            <p class=""text-justify"">
                Mientas que el patrón MVVM por su parte, funciona de una manera un poco diferente ya que la capa de
                ViewModel no contiene controladores como tal, pero actúa como una carpeta que une datos entre la vista
                y el modelo. Mientras que el patrón MVC está diseñado específicamente para crear una separación de
                preocupaciones entre el modelo y la vista, el formato MVVM con enlace de datos está diseñado
                específicamente para permi");
            WriteLiteral(@"tir que la vista y el modelo se comuniquen directamente entre sí, también
                se encuentra un binder el cual sincroniza la información en vez de hacerlo un controlador como es el
                caso de MVC. Otra diferencia es que MVVM permite hacer pruebas unitarias para el modelo y para
                vista-modelo, sin necesidad de hacer referencia a la vista, además permite reutilizar porciones de código.
            </p>

        </div>
    </div>
</nav>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
